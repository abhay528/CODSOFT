/**
 * Represents a user's bank account.
 * This class stores the account balance and provides methods
 * to deposit, withdraw, and check the balance.
 */
public class BankAccount {
    // 4. Stores the account balance. It's private to ensure it can only be changed via methods.
    private double balance;

    /**
     * Constructor to create a bank account with an initial balance.
     * @param initialBalance The starting balance of the account.
     */
    public BankAccount(double initialBalance) {
        if (initialBalance >= 0) {
            this.balance = initialBalance;
        } else {
            this.balance = 0; // Balance cannot be negative initially.
        }
    }

    /**
     * Returns the current account balance.
     * @return The current balance.
     */
    public double getBalance() {
        return this.balance;
    }

    /**
     * Deposits a specified amount into the account.
     * @param amount The amount to deposit. Must be positive.
     */
    public void deposit(double amount) {
        // 6. Validate user input: amount must be positive.
        if (amount > 0) {
            this.balance += amount;
            System.out.printf("Successfully deposited $%.2f. New balance is $%.2f\n", amount, this.balance);
        } else {
            System.out.println("Invalid deposit amount. Please enter a positive value.");
        }
    }

    /**
     * Withdraws a specified amount from the account.
     * Checks for sufficient funds before allowing the withdrawal.
     * @param amount The amount to withdraw. Must be positive.
     * @return true if the withdrawal was successful, false otherwise.
     */
    public boolean withdraw(double amount) {
        // 6. Validate user input: amount must be positive and within balance.
        if (amount <= 0) {
            System.out.println("Invalid withdrawal amount. Please enter a positive value.");
            return false;
        }
        
        if (amount > this.balance) {
            System.out.printf("Withdrawal failed. Insufficient funds. You only have $%.2f.\n", this.balance);
            return false;
        }

        this.balance -= amount;
        System.out.printf("Successfully withdrew $%.2f. Remaining balance is $%.2f\n", amount, this.balance);
        return true;
    }
}
import java.util.Scanner;

/**
 * 1. Represents the ATM machine.
 * This class provides the user interface and handles user interactions
 * for withdrawing, depositing, and checking the balance.
 */
public class ATM {
    // 5. Connects the ATM to a user's bank account.
    private BankAccount userAccount;
    private Scanner scanner;

    /**
     * Constructor for the ATM.
     * @param account The BankAccount object this ATM will interact with.
     */
    public ATM(BankAccount account) {
        this.userAccount = account;
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu and handles user choices.
     */
    public void showMenu() {
        int choice = 0;
        while (choice != 4) {
            // 2. Design the user interface for the ATM.
            System.out.println("\n--- ATM Menu ---");
            System.out.println("1. Check Balance");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Exit");
            System.out.print("Please choose an option: ");

            // Input validation for menu choice
            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
                switch (choice) {
                    case 1:
                        checkBalance();
                        break;
                    case 2:
                        deposit();
                        break;
                    case 3:
                        withdraw();
                        break;
                    case 4:
                        System.out.println("Thank you for using the ATM. Goodbye!");
                        break;
                    default:
                        System.out.println("Invalid choice. Please select a number from 1-4.");
                }
            } else {
                System.out.println("Invalid input. Please enter a number.");
                scanner.next(); // Clear the invalid input from the scanner
            }
        }
    }

    /**
     * 3. Implements the method for checking balance.
     */
    private void checkBalance() {
        System.out.printf("Your current balance is: $%.2f\n", userAccount.getBalance());
    }

    /**
     * 3. Implements the method for depositing money.
     */
    private void deposit() {
        System.out.print("Enter the amount to deposit: ");
        if (scanner.hasNextDouble()) {
            double amount = scanner.nextDouble();
            userAccount.deposit(amount);
        } else {
            System.out.println("Invalid input. Please enter a numerical value for the amount.");
            scanner.next(); // Clear the invalid input
        }
    }

    /**
     * 3. Implements the method for withdrawing money.
     */
    private void withdraw() {
        System.out.print("Enter the amount to withdraw: ");
        if (scanner.hasNextDouble()) {
            double amount = scanner.nextDouble();
            userAccount.withdraw(amount);
        } else {
            System.out.println("Invalid input. Please enter a numerical value for the amount.");
            scanner.next(); // Clear the invalid input
        }
    }

    /**
     * The main method to run the ATM simulation.
     */
    public static void main(String[] args) {
        // Create a bank account with an initial balance of $1000.
        BankAccount account = new BankAccount(1000.00);
        
        // Create an ATM instance connected to that account.
        ATM atm = new ATM(account);
        
        // Start the ATM menu.
        atm.showMenu();
    }
}
